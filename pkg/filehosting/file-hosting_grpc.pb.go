// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: file-hosting.proto

package filehosting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileHosting_UploadFile_FullMethodName      = "/filehosting.FileHosting/UploadFile"
	FileHosting_GetFile_FullMethodName         = "/filehosting.FileHosting/GetFile"
	FileHosting_GetFileMetadata_FullMethodName = "/filehosting.FileHosting/GetFileMetadata"
	FileHosting_GetFiles_FullMethodName        = "/filehosting.FileHosting/GetFiles"
)

// FileHostingClient is the client API for FileHosting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileHostingClient interface {
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error)
	GetFile(ctx context.Context, in *FileId, opts ...grpc.CallOption) (*File, error)
	GetFileMetadata(ctx context.Context, in *FileId, opts ...grpc.CallOption) (*FileMetadata, error)
	GetFiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Files, error)
}

type fileHostingClient struct {
	cc grpc.ClientConnInterface
}

func NewFileHostingClient(cc grpc.ClientConnInterface) FileHostingClient {
	return &fileHostingClient{cc}
}

func (c *fileHostingClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadFileResponse)
	err := c.cc.Invoke(ctx, FileHosting_UploadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileHostingClient) GetFile(ctx context.Context, in *FileId, opts ...grpc.CallOption) (*File, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(File)
	err := c.cc.Invoke(ctx, FileHosting_GetFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileHostingClient) GetFileMetadata(ctx context.Context, in *FileId, opts ...grpc.CallOption) (*FileMetadata, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileMetadata)
	err := c.cc.Invoke(ctx, FileHosting_GetFileMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileHostingClient) GetFiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Files, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Files)
	err := c.cc.Invoke(ctx, FileHosting_GetFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileHostingServer is the server API for FileHosting service.
// All implementations must embed UnimplementedFileHostingServer
// for forward compatibility.
type FileHostingServer interface {
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error)
	GetFile(context.Context, *FileId) (*File, error)
	GetFileMetadata(context.Context, *FileId) (*FileMetadata, error)
	GetFiles(context.Context, *emptypb.Empty) (*Files, error)
	mustEmbedUnimplementedFileHostingServer()
}

// UnimplementedFileHostingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileHostingServer struct{}

func (UnimplementedFileHostingServer) UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFileHostingServer) GetFile(context.Context, *FileId) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedFileHostingServer) GetFileMetadata(context.Context, *FileId) (*FileMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileMetadata not implemented")
}
func (UnimplementedFileHostingServer) GetFiles(context.Context, *emptypb.Empty) (*Files, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFiles not implemented")
}
func (UnimplementedFileHostingServer) mustEmbedUnimplementedFileHostingServer() {}
func (UnimplementedFileHostingServer) testEmbeddedByValue()                     {}

// UnsafeFileHostingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileHostingServer will
// result in compilation errors.
type UnsafeFileHostingServer interface {
	mustEmbedUnimplementedFileHostingServer()
}

func RegisterFileHostingServer(s grpc.ServiceRegistrar, srv FileHostingServer) {
	// If the following call pancis, it indicates UnimplementedFileHostingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileHosting_ServiceDesc, srv)
}

func _FileHosting_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileHostingServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileHosting_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileHostingServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileHosting_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileHostingServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileHosting_GetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileHostingServer).GetFile(ctx, req.(*FileId))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileHosting_GetFileMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileHostingServer).GetFileMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileHosting_GetFileMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileHostingServer).GetFileMetadata(ctx, req.(*FileId))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileHosting_GetFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileHostingServer).GetFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileHosting_GetFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileHostingServer).GetFiles(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// FileHosting_ServiceDesc is the grpc.ServiceDesc for FileHosting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileHosting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filehosting.FileHosting",
	HandlerType: (*FileHostingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFile",
			Handler:    _FileHosting_UploadFile_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _FileHosting_GetFile_Handler,
		},
		{
			MethodName: "GetFileMetadata",
			Handler:    _FileHosting_GetFileMetadata_Handler,
		},
		{
			MethodName: "GetFiles",
			Handler:    _FileHosting_GetFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file-hosting.proto",
}
